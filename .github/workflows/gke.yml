# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Build with gradle and deploy to GKE cluster

on:
  push:
    branches: [master]

env:
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ucampus-cluster
  GKE_ZONE: us-east1-b
  WEB_IMAGE: web-server
  APP_IMAGE: app-server

jobs:
  build:
    name: Build libs, AppServer and WebServer
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11.0.7 for x64
        uses: actions/setup-java@v1
        with:
          java-version: '11.0.7'
          architecture: x64
      - run: chmod +x ./uCampusLibs/domainObjects/gradlew
      - run: ./gradlew build
        working-directory: ./uCampusLibs/domainObjects/
      - run: cp ./uCampusLibs/domainObjects/build/libs/domainObjects.jar ./uCampusLibs/dtoObjects/libs/domainObjects.jar
      - run: chmod +x ./uCampusLibs/dtoObjects/gradlew
      - run: ./gradlew build
        working-directory: ./uCampusLibs/dtoObjects/      
      - run: cp ./uCampusLibs/domainObjects/build/libs/domainObjects.jar ./AppServer/libs/domainObjects.jar
      - run: cp ./uCampusLibs/dtoObjects/build/libs/dtoObjects.jar ./AppServer/libs/dtoObjects.jar
      - run: cp ./uCampusLibs/domainObjects/build/libs/domainObjects.jar ./WebServer/libs/domainObjects.jar
      - run: cp ./uCampusLibs/dtoObjects/build/libs/dtoObjects.jar ./WebServer/libs/dtoObjects.jar
      - run: chmod +x ./AppServer/gradlew
      - run: echo "spring.profiles.active=prod" > AppServer/src/main/resources/application.properties
      - run: sed -i -e 's/PASSWORD/'"$POSTGRES_PASSWORD"'/g' AppServer/src/main/resources/application-prod.properties
      - run: ./gradlew build
        working-directory: ./AppServer
      - run: chmod +x ./WebServer/gradlew
      - run: ./gradlew build
        working-directory: ./WebServer
      - name: Upload AppServer .jar as artifact
        uses: actions/upload-artifact@v1
        with:
          name: app-snapshot
          path: ./AppServer/build/libs
      - name: Upload WebServer .jar as artifact
        uses: actions/upload-artifact@v1
        with:
          name: web-snapshot
          path: ./WebServer/build/libs

  deploy:
    needs: build
    name: Deploy apps to GKE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v1
        with:
          name: app-snapshot
          path: AppServer/app-snapshot

      - uses: actions/download-artifact@v1
        with:
          name: web-snapshot
          path: WebServer/web-snapshot

      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "286.0.0"
          service_account_email: ${{ secrets.GKE_SA_EMAIL }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      - run: |-
          gcloud --quiet auth configure-docker

      - run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      - name: Build WebServer docker image
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$WEB_IMAGE:$GITHUB_SHA" \
            WebServer

      - name: Build AppServer docker image
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$APP_IMAGE:$GITHUB_SHA" \
            AppServer

      - name: Publish WebServer docker image
        run: |-
          docker push "gcr.io/$PROJECT_ID/$WEB_IMAGE:$GITHUB_SHA"

      - name: Publish AppServer docker image
        run: |-
          docker push "gcr.io/$PROJECT_ID/$APP_IMAGE:$GITHUB_SHA"          

      # - name: Set up Kustomize
      #   run: |-
      #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
      #     chmod u+x ./kustomize

      # - name: Deploy
      #   run: |-
      #     ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
      #     ./kustomize build . | kubectl apply -f -
      #     kubectl rollout status deployment/web-server